//////////////////////////////////////////////////////////////////
////
////
//// 	AES CORE BLOCK
////
////
////
//// This file is part of the APB to AES128 project
////
//// http://www.opencores.org/cores/apbtoaes128/
////
////
////
//// Description
////
//// Implementation of APB IP core according to
////
//// aes128_spec IP core specification document.
////
////
////
//// To Do: Things are right here but always all block can suffer changes
////
////
////
////
////
//// Author(s): - Felipe Fernandes Da Costa, fefe2560@gmail.com
////
///////////////////////////////////////////////////////////////// 
////
////
//// Copyright (C) 2009 Authors and OPENCORES.ORG
////
////
////
//// This source file may be used and distributed without
////
//// restriction provided that this copyright statement is not
////
//// removed from the file and that any derivative work contains
//// the original copyright notice and the associated disclaimer.
////
////
//// This source file is free software; you can redistribute it
////
//// and/or modify it under the terms of the GNU Lesser General
////
//// Public License as published by the Free Software Foundation;
//// either version 2.1 of the License, or (at your option) any
////
//// later version.
////
////
////
//// This source is distributed in the hope that it will be
////
//// useful, but WITHOUT ANY WARRANTY; without even the implied
////
//// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
////
//// PURPOSE. See the GNU Lesser General Public License for more
//// details.
////
////
////
//// You should have received a copy of the GNU Lesser General
////
//// Public License along with this source; if not, download it
////
//// from http://www.opencores.org/lgpl.shtml
////
////
///////////////////////////////////////////////////////////////////
static int init_calltf(char*user_data)
{

	vpiHandle PRESETn = vpi_handle_by_name("AES_GLADIC_tb.PRESETn", NULL);
	vpiHandle PWDATA = vpi_handle_by_name("AES_GLADIC_tb.PWDATA", NULL);
	vpiHandle PENABLE = vpi_handle_by_name("AES_GLADIC_tb.PENABLE", NULL);
	vpiHandle PSEL = vpi_handle_by_name("AES_GLADIC_tb.PSEL", NULL);
	vpiHandle PWRITE = vpi_handle_by_name("AES_GLADIC_tb.PWRITE", NULL);
	vpiHandle PADDR = vpi_handle_by_name("AES_GLADIC_tb.PADDR", NULL);
	vpiHandle PRDATA = vpi_handle_by_name("AES_GLADIC_tb.PRDATA", NULL);
	vpiHandle PREADY = vpi_handle_by_name("AES_GLADIC_tb.PREADY", NULL);
	vpiHandle PSLVERR = vpi_handle_by_name("AES_GLADIC_tb.PSLVERR", NULL);
	vpiHandle int_ccf = vpi_handle_by_name("AES_GLADIC_tb.int_ccf", NULL);
	vpiHandle int_err = vpi_handle_by_name("AES_GLADIC_tb.int_err", NULL);
	vpiHandle dma_req_wr = vpi_handle_by_name("AES_GLADIC_tb.dma_req_wr", NULL);
	vpiHandle dma_req_rd = vpi_handle_by_name("AES_GLADIC_tb.dma_req_rd", NULL);
	vpiHandle i = vpi_handle_by_name("AES_GLADIC_tb.i", NULL);



	STATE = IDLE;


	counter_write = 0;
	counter_read  = 0;
	counter_wait  = 0;
	PACKETS_GENERATED = 0;
	counter = 0;
	reset_counter = 0;
	flag = 0;

	a = 0;
	b = 0;
	c = 0;
	d = 0;

	v_monitor.value.integer=0;
	v_monitor_catch.value.integer=0;
	A=B=C=D=E=F=G=H=I=J=L=M=N=O=0;

	for(counter_monitor=0;counter_monitor < 16;counter_monitor++)
	{
		INPUT_KEYR[counter_monitor] =0x00;
		OUTPUT_KEYR[counter_monitor]=0x00;

		INPUT_IVR[counter_monitor]  =0x00;
		OUTPUT_IVR[counter_monitor] =0x00;

		INPUT_TEXT[counter_monitor]=0x00;
		OUTPUT_TEXT[counter_monitor]=0x00;	
	}

	counter_monitor=0;
	cycle_counter =0;


	/*
		ECB ERROR TEST CASES DEFINITIONS
	*/
	
	vector_CR[0]= 1;     // ECB ENCRYPTION  REGISTER ERROR DATATYPE 0
	vector_CR[1]= 3;     // ECB ENCRYPTION  REGISTER ERROR DATATYPE 1
	vector_CR[2]= 5;     // ECB ENCRYPTION  REGISTER ERROR DATATYPE 2
	vector_CR[3]= 7;     // ECB ENCRYPTION  REGISTER ERROR DATATYPE 3

	vector_CR[4]= 1025;  // ECB ENCRYPTION INT_ERR DATATYPE 0
	vector_CR[5]= 1027;  // ECB ENCRYPTION INT_ERR DATATYPE 1
	vector_CR[6]= 1029;  // ECB ENCRYPTION INT_ERR DATATYPE 2
	vector_CR[7]= 1031;  // ECB ENCRYPTION INT_ERR DATATYPE 3

	vector_CR[8] = 6145;  // ECB ENCRYPTION DMA REGISTER ERROR DATATYPE 0
	vector_CR[9] = 6147;  // ECB ENCRYPTION DMA REGISTER ERROR DATATYPE 1
	vector_CR[10]= 6149;  // ECB ENCRYPTION DMA REGISTER ERROR DATATYPE 2
	vector_CR[11]= 6151;  // ECB ENCRYPTION DMA REGISTER ERROR DATATYPE 3

	vector_CR[12]= 7169;  // ECB ENCRYPTION DMA INT_ERR DATATYPE 0
	vector_CR[13]= 7171;  // ECB ENCRYPTION DMA INT_ERR DATATYPE 1
	vector_CR[14]= 7173;  // ECB ENCRYPTION DMA INT_ERR DATATYPE 2
	vector_CR[15]= 7175;  // ECB ENCRYPTION DMA INT_ERR DATATYPE 3

	vector_CR[16]= 513;   // ECB ENCRYPTION INT_CCF REGISTER ERROR DATATYPE 0
	vector_CR[17]= 515;   // ECB ENCRYPTION INT_CCF REGISTER ERROR DATATYPE 1
	vector_CR[18]= 517;   // ECB ENCRYPTION INT_CCF REGISTER ERROR DATATYPE 2
	vector_CR[19]= 519;   // ECB ENCRYPTION INT_CCF REGISTER ERROR DATATYPE 3

	vector_CR[20]= 1537;  // ECB ENCRYPTION INT_CCF INT_ERR DATATYPE 0
	vector_CR[21]= 1539;  // ECB ENCRYPTION INT_CCF INT_ERR DATATYPE 1
	vector_CR[22]= 1541;  // ECB ENCRYPTION INT_CCF INT_ERR DATATYPE 2
	vector_CR[23]= 1543;  // ECB ENCRYPTION INT_CCF INT_ERR DATATYPE 3

	vector_CR[24]= 17;    // ECB DECRYPTION REGISTER ERROR DATATYPE 0
	vector_CR[25]= 19;    // ECB DECRYPTION REGISTER ERROR DATATYPE 1
	vector_CR[26]= 21;    // ECB DECRYPTION REGISTER ERROR DATATYPE 2
	vector_CR[27]= 23;    // ECB DECRYPTION REGISTER ERROR DATATYPE 3

	vector_CR[28]= 1041;  // ECB DECRYPTION INT_ERR DATATYPE 0
	vector_CR[29]= 1043;  // ECB DECRYPTION INT_ERR DATATYPE 1
	vector_CR[30]= 1045;  // ECB DECRYPTION INT_ERR DATATYPE 2
	vector_CR[31]= 1047;  // ECB DECRYPTION INT_ERR DATATYPE 3

	vector_CR[32]= 6161;  // ECB DECRYPTION DMA REGISTER ERROR  DATATYPE 0
	vector_CR[33]= 6163;  // ECB DECRYPTION DMA REGISTER ERROR  DATATYPE 1
	vector_CR[34]= 6165;  // ECB DECRYPTION DMA REGISTER ERROR  DATATYPE 2
	vector_CR[35]= 6167;  // ECB DECRYPTION DMA REGISTER ERROR  DATATYPE 3

	vector_CR[36]= 7185;  // ECB DECRYPTION DMA INT_ERR  DATATYPE 0
	vector_CR[37]= 7187;  // ECB DECRYPTION DMA INT_ERR  DATATYPE 1
	vector_CR[38]= 7189;  // ECB DECRYPTION DMA INT_ERR  DATATYPE 2
	vector_CR[39]= 7191;  // ECB DECRYPTION DMA INT_ERR  DATATYPE 3

	vector_CR[40]= 529;   // ECB DECRYPTION INT CCF REGISTER ERROR DATATYPE 0
	vector_CR[41]= 531;   // ECB DECRYPTION INT CCF REGISTER ERROR DATATYPE 1
	vector_CR[42]= 533;   // ECB DECRYPTION INT CCF REGISTER ERROR DATATYPE 2
	vector_CR[43]= 535;   // ECB DECRYPTION INT CCF REGISTER ERROR DATATYPE 3

	vector_CR[44]= 1553;  // ECB DECRYPTION INT CCF INT_ERR DATATYPE 0
	vector_CR[45]= 1555;  // ECB DECRYPTION INT CCF INT_ERR DATATYPE 1
	vector_CR[46]= 1557;  // ECB DECRYPTION INT CCF INT_ERR DATATYPE 2
	vector_CR[47]= 1559;  // ECB DECRYPTION INT CCF INT_ERR DATATYPE 3

	vector_CR[48]= 25;    // ECB DECRYPTION DERIVATION REGISTER ERROR DATATYPE 0
	vector_CR[49]= 27;    // ECB DECRYPTION DERIVATION REGISTER ERROR DATATYPE 1
	vector_CR[50]= 29;    // ECB DECRYPTION DERIVATION REGISTER ERROR DATATYPE 2
	vector_CR[51]= 31;    // ECB DECRYPTION DERIVATION REGISTER ERROR DATATYPE 3

	vector_CR[52]= 1049;  // ECB DECRYPTION DERIVATION INT_ERR DATATYPE 0
	vector_CR[53]= 1051;  // ECB DECRYPTION DERIVATION INT_ERR DATATYPE 1
	vector_CR[54]= 1053;  // ECB DECRYPTION DERIVATION INT_ERR DATATYPE 2
	vector_CR[55]= 1055;  // ECB DECRYPTION DERIVATION INT_ERR DATATYPE 3

	vector_CR[56]= 6169;  // ECB DECRYPTION DERIVATION DMA REGISTER ERROR DATATYPE 0
	vector_CR[57]= 6171;  // ECB DECRYPTION DERIVATION DMA REGISTER ERROR DATATYPE 1
	vector_CR[58]= 6173;  // ECB DECRYPTION DERIVATION DMA REGISTER ERROR DATATYPE 2
	vector_CR[59]= 6175;  // ECB DECRYPTION DERIVATION DMA REGISTER ERROR DATATYPE 3

	vector_CR[60]= 7193;  // ECB DECRYPTION DERIVATION DMA INT_ERR DATATYPE 0
	vector_CR[61]= 7195;  // ECB DECRYPTION DERIVATION DMA INT_ERR DATATYPE 1
	vector_CR[62]= 7197;  // ECB DECRYPTION DERIVATION DMA INT_ERR DATATYPE 2
	vector_CR[63]= 7199;  // ECB DECRYPTION DERIVATION DMA INT_ERR DATATYPE 3

	vector_CR[64]= 537;   // ECB DECRYPTION DERIVATION INT CCF REGISTER ERROR DATATYPE 0
	vector_CR[65]= 539;   // ECB DECRYPTION DERIVATION INT CCF REGISTER ERROR DATATYPE 1
	vector_CR[66]= 541;   // ECB DECRYPTION DERIVATION INT CCF REGISTER ERROR DATATYPE 2
	vector_CR[67]= 543;   // ECB DECRYPTION DERIVATION INT CCF REGISTER ERROR DATATYPE 3

	vector_CR[68]= 1561;  // ECB DECRYPTION DERIVATION INT CCF INT_ERR DATATYPE 0
	vector_CR[69]= 1563;  // ECB DECRYPTION DERIVATION INT CCF INT_ERR DATATYPE 1
	vector_CR[70]= 1565;  // ECB DECRYPTION DERIVATION INT CCF INT_ERR DATATYPE 2
	vector_CR[71]= 1567;  // ECB DECRYPTION DERIVATION INT CCF INT_ERR DATATYPE 3

	vector_CR[72]= 9;     // ECB KEY GENERATION REGISTER ERROR 
	vector_CR[73]= 1033;  // ECB KEY GENERATION INT_ERR 

	vector_CR[74]= 6153;  // ECB KEY GENERATION DMA REGISTER ERROR 
	vector_CR[75]= 7177;  // ECB KEY GENERATION DMA INT_ERR 
 
	vector_CR[76]= 521;   // ECB DECRYPTION DERIVATION INT CCF REGISTER ERROR
	vector_CR[77]= 1545;  // ECB DECRYPTION DERIVATION INT CCF INT_ERR


	/*
		CBC ERROR TEST CASES DEFINITIONS
	*/

	vector_CR[78]= 33;    // CBC ENCRYPTION  REGISTER ERROR DATATYPE 0
	vector_CR[79]= 35;    // CBC ENCRYPTION  REGISTER ERROR DATATYPE 1
	vector_CR[80]= 37;    // CBC ENCRYPTION  REGISTER ERROR DATATYPE 2
	vector_CR[81]= 39;    // CBC ENCRYPTION  REGISTER ERROR DATATYPE 3

	vector_CR[82]= 1057;  // CBC ENCRYPTION INT_ERR DATATYPE 0
	vector_CR[83]= 1059;  // CBC ENCRYPTION INT_ERR DATATYPE 1
	vector_CR[84]= 1061;  // CBC ENCRYPTION INT_ERR DATATYPE 2
	vector_CR[85]= 1063;  // CBC ENCRYPTION INT_ERR DATATYPE 3

	vector_CR[86]= 6177;  // CBC ENCRYPTION DMA REGISTER ERROR DATATYPE 0
	vector_CR[87]= 6179;  // CBC ENCRYPTION DMA REGISTER ERROR DATATYPE 1
	vector_CR[88]= 6181;  // CBC ENCRYPTION DMA REGISTER ERROR DATATYPE 2
	vector_CR[89]= 6183;  // CBC ENCRYPTION DMA REGISTER ERROR DATATYPE 3

	vector_CR[90]= 7201;  // CBC ENCRYPTION DMA INT_ERR DATATYPE 0
	vector_CR[91]= 7203;  // CBC ENCRYPTION DMA INT_ERR DATATYPE 1
	vector_CR[92]= 7205;  // CBC ENCRYPTION DMA INT_ERR DATATYPE 2
	vector_CR[92]= 7207;  // CBC ENCRYPTION DMA INT_ERR DATATYPE 3

	vector_CR[93]= 545;   // CBC ENCRYPTION INT_CCF REGISTER ERROR DATATYPE 0
	vector_CR[94]= 547;   // CBC ENCRYPTION INT_CCF REGISTER ERROR DATATYPE 1
	vector_CR[95]= 549;   // CBC ENCRYPTION INT_CCF REGISTER ERROR DATATYPE 2
	vector_CR[96]= 551;   // CBC ENCRYPTION INT_CCF REGISTER ERROR DATATYPE 3

	vector_CR[97]= 1569;  // CBC ENCRYPTION INT_CCF INT_ERR DATATYPE 0
	vector_CR[98]= 1571;  // CBC ENCRYPTION INT_CCF INT_ERR DATATYPE 1
	vector_CR[99]= 1573;  // CBC ENCRYPTION INT_CCF INT_ERR DATATYPE 2
	vector_CR[100]= 1575; // CBC ENCRYPTION INT_CCF INT_ERR DATATYPE 3

	vector_CR[101]= 49;   // CBC DECRYPTION REGISTER ERROR DATATYPE 0
	vector_CR[102]= 51;   // CBC DECRYPTION REGISTER ERROR DATATYPE 1
	vector_CR[103]= 53;   // CBC DECRYPTION REGISTER ERROR DATATYPE 2
	vector_CR[104]= 55;   // CBC DECRYPTION REGISTER ERROR DATATYPE 3

	vector_CR[105]= 1073; // CBC DECRYPTION INT_ERR DATATYPE 0
	vector_CR[106]= 1075; // CBC DECRYPTION INT_ERR DATATYPE 1
	vector_CR[107]= 1077; // CBC DECRYPTION INT_ERR DATATYPE 2
	vector_CR[108]= 1079; // CBC DECRYPTION INT_ERR DATATYPE 3

	vector_CR[109]= 6193; // CBC DECRYPTION DMA REGISTER ERROR  DATATYPE 0
	vector_CR[110]= 6195; // CBC DECRYPTION DMA REGISTER ERROR  DATATYPE 1
	vector_CR[111]= 6197; // CBC DECRYPTION DMA REGISTER ERROR  DATATYPE 2
	vector_CR[112]= 6199; // CBC DECRYPTION DMA REGISTER ERROR  DATATYPE 3

	vector_CR[113]= 7217; // CBC DECRYPTION DMA INT_ERR  DATATYPE 0
	vector_CR[114]= 7219; // CBC DECRYPTION DMA INT_ERR  DATATYPE 1
	vector_CR[115]= 7221; // CBC DECRYPTION DMA INT_ERR  DATATYPE 2
	vector_CR[116]= 7223; // CBC DECRYPTION DMA INT_ERR  DATATYPE 3

	vector_CR[117]= 561;  // CBC DECRYPTION INT CCF REGISTER ERROR DATATYPE 0
	vector_CR[118]= 563;  // CBC DECRYPTION INT CCF REGISTER ERROR DATATYPE 1
	vector_CR[119]= 565;  // CBC DECRYPTION INT CCF REGISTER ERROR DATATYPE 2
	vector_CR[120]= 567;  // CBC DECRYPTION INT CCF REGISTER ERROR DATATYPE 3

	vector_CR[121]= 1585; // CBC DECRYPTION INT CCF INT_ERR DATATYPE 0
	vector_CR[122]= 1587; // CBC DECRYPTION INT CCF INT_ERR DATATYPE 1
	vector_CR[123]= 1589; // CBC DECRYPTION INT CCF INT_ERR DATATYPE 2
	vector_CR[124]= 1591; // CBC DECRYPTION INT CCF INT_ERR DATATYPE 3

	vector_CR[125]= 57;   // CBC DECRYPTION DERIVATION REGISTER ERROR DATATYPE 0
	vector_CR[126]= 59;   // CBC DECRYPTION DERIVATION REGISTER ERROR DATATYPE 1
	vector_CR[127]= 61;   // CBC DECRYPTION DERIVATION REGISTER ERROR DATATYPE 2
	vector_CR[128]= 63;   // CBC DECRYPTION DERIVATION REGISTER ERROR DATATYPE 3

	vector_CR[129]= 1081; // CBC DECRYPTION DERIVATION INT_ERR DATATYPE 0
	vector_CR[130]= 1083; // CBC DECRYPTION DERIVATION INT_ERR DATATYPE 1
	vector_CR[131]= 1085; // CBC DECRYPTION DERIVATION INT_ERR DATATYPE 2
	vector_CR[132]= 1087; // CBC DECRYPTION DERIVATION INT_ERR DATATYPE 3

	vector_CR[133]= 6201; // CBC DECRYPTION DERIVATION DMA REGISTER ERROR DATATYPE 0
	vector_CR[134]= 6203; // CBC DECRYPTION DERIVATION DMA REGISTER ERROR DATATYPE 1
	vector_CR[135]= 6205; // CBC DECRYPTION DERIVATION DMA REGISTER ERROR DATATYPE 2
	vector_CR[136]= 6207; // CBC DECRYPTION DERIVATION DMA REGISTER ERROR DATATYPE 3

	vector_CR[137]= 7225; // CBC DECRYPTION DERIVATION DMA INT_ERR DATATYPE 0
	vector_CR[138]= 7227; // CBC DECRYPTION DERIVATION DMA INT_ERR DATATYPE 1
	vector_CR[139]= 7229; // CBC DECRYPTION DERIVATION DMA INT_ERR DATATYPE 2
	vector_CR[140]= 7231; // CBC DECRYPTION DERIVATION DMA INT_ERR DATATYPE 3

	vector_CR[141]= 569;  // CBC DECRYPTION DERIVATION INT CCF REGISTER ERROR DATATYPE 0
	vector_CR[142]= 571;  // CBC DECRYPTION DERIVATION INT CCF REGISTER ERROR DATATYPE 1
	vector_CR[143]= 573;  // CBC DECRYPTION DERIVATION INT CCF REGISTER ERROR DATATYPE 2
	vector_CR[144]= 575;  // CBC DECRYPTION DERIVATION INT CCF REGISTER ERROR DATATYPE 3

	vector_CR[145]= 1593; // CBC DECRYPTION DERIVATION INT CCF INT_ERR DATATYPE 0
	vector_CR[146]= 1595; // CBC DECRYPTION DERIVATION INT CCF INT_ERR DATATYPE 1
	vector_CR[147]= 1597; // CBC DECRYPTION DERIVATION INT CCF INT_ERR DATATYPE 2
	vector_CR[148]= 1599; // CBC DECRYPTION DERIVATION INT CCF INT_ERR DATATYPE 3

	vector_CR[149]= 41;   // CBC KEY GENERATION REGISTER ERROR 
	vector_CR[150]= 1065; // CBC KEY GENERATION INT_ERR 

	vector_CR[151]= 6185; // CBC KEY GENERATION DMA REGISTER ERROR 
	vector_CR[152]= 7209; // CBC KEY GENERATION DMA INT_ERR 
 
	vector_CR[153]= 553;  // CBC DECRYPTION DERIVATION INT CCF REGISTER ERROR
	vector_CR[154]= 1577; // CBC DECRYPTION DERIVATION INT CCF INT_ERR


	/*
		CTR ERROR TEST CASES DEFINITIONS
	*/

	vector_CR[155]= 65;   // CTR ENCRYPTION  REGISTER ERROR DATATYPE 0
	vector_CR[156]= 67;   // CTR ENCRYPTION  REGISTER ERROR DATATYPE 1
	vector_CR[157]= 69;   // CTR ENCRYPTION  REGISTER ERROR DATATYPE 2
	vector_CR[158]= 71;   // CTR ENCRYPTION  REGISTER ERROR DATATYPE 3

	vector_CR[159]= 1089; // CTR ENCRYPTION INT_ERR DATATYPE 0
	vector_CR[160]= 1091; // CTR ENCRYPTION INT_ERR DATATYPE 1
	vector_CR[161]= 1093; // CTR ENCRYPTION INT_ERR DATATYPE 2
	vector_CR[162]= 1095; // CTR ENCRYPTION INT_ERR DATATYPE 3

	vector_CR[163]= 6209; // CTR ENCRYPTION DMA REGISTER ERROR DATATYPE 0
	vector_CR[164]= 6211; // CTR ENCRYPTION DMA REGISTER ERROR DATATYPE 1
	vector_CR[165]= 6213; // CTR ENCRYPTION DMA REGISTER ERROR DATATYPE 2
	vector_CR[166]= 6215; // CTR ENCRYPTION DMA REGISTER ERROR DATATYPE 3

	vector_CR[167]= 7233; // CTR ENCRYPTION DMA INT_ERR DATATYPE 0
	vector_CR[168]= 7235; // CTR ENCRYPTION DMA INT_ERR DATATYPE 1
	vector_CR[169]= 7237; // CTR ENCRYPTION DMA INT_ERR DATATYPE 2
	vector_CR[170]= 7239; // CTR ENCRYPTION DMA INT_ERR DATATYPE 3

	vector_CR[171]= 577;  // CTR ENCRYPTION INT_CCF REGISTER ERROR DATATYPE 0
	vector_CR[172]= 579;  // CTR ENCRYPTION INT_CCF REGISTER ERROR DATATYPE 1
	vector_CR[173]= 581;  // CTR ENCRYPTION INT_CCF REGISTER ERROR DATATYPE 2
	vector_CR[174]= 583;  // CTR ENCRYPTION INT_CCF REGISTER ERROR DATATYPE 3

	vector_CR[175]= 1601; // CTR ENCRYPTION INT_CCF INT_ERR DATATYPE 0
	vector_CR[176]= 1603; // CTR ENCRYPTION INT_CCF INT_ERR DATATYPE 1
	vector_CR[177]= 1605; // CTR ENCRYPTION INT_CCF INT_ERR DATATYPE 2
	vector_CR[178]= 1607; // CTR ENCRYPTION INT_CCF INT_ERR DATATYPE 3

	vector_CR[179]= 81;   // CTR DECRYPTION REGISTER ERROR DATATYPE 0
	vector_CR[180]= 83;   // CTR DECRYPTION REGISTER ERROR DATATYPE 1
	vector_CR[181]= 85;   // CTR DECRYPTION REGISTER ERROR DATATYPE 2
	vector_CR[182]= 87;   // CTR DECRYPTION REGISTER ERROR DATATYPE 3

	vector_CR[183]= 1105; // CTR DECRYPTION INT_ERR DATATYPE 0
	vector_CR[184]= 1107; // CTR DECRYPTION INT_ERR DATATYPE 1
	vector_CR[185]= 1109; // CTR DECRYPTION INT_ERR DATATYPE 2
	vector_CR[186]= 1111; // CTR DECRYPTION INT_ERR DATATYPE 3

	vector_CR[187]= 6225; // CTR DECRYPTION DMA REGISTER ERROR  DATATYPE 0
	vector_CR[188]= 6227; // CTR DECRYPTION DMA REGISTER ERROR  DATATYPE 1
	vector_CR[189]= 6229; // CTR DECRYPTION DMA REGISTER ERROR  DATATYPE 2
	vector_CR[190]= 6231; // CTR DECRYPTION DMA REGISTER ERROR  DATATYPE 3

	vector_CR[191]= 7249; // CTR DECRYPTION DMA INT_ERR  DATATYPE 0
	vector_CR[192]= 7251; // CTR DECRYPTION DMA INT_ERR  DATATYPE 1
	vector_CR[193]= 7253; // CTR DECRYPTION DMA INT_ERR  DATATYPE 2
	vector_CR[194]= 7255; // CTR DECRYPTION DMA INT_ERR  DATATYPE 3

	vector_CR[195]= 593;  // CTR DECRYPTION INT CCF REGISTER ERROR DATATYPE 0
	vector_CR[196]= 595;  // CTR DECRYPTION INT CCF REGISTER ERROR DATATYPE 1
	vector_CR[197]= 597;  // CTR DECRYPTION INT CCF REGISTER ERROR DATATYPE 2
	vector_CR[198]= 599;  // CTR DECRYPTION INT CCF REGISTER ERROR DATATYPE 3

	vector_CR[199]= 1617; // CTR DECRYPTION INT CCF INT_ERR DATATYPE 0
	vector_CR[200]= 1619; // CTR DECRYPTION INT CCF INT_ERR DATATYPE 1
	vector_CR[201]= 1621; // CTR DECRYPTION INT CCF INT_ERR DATATYPE 2
	vector_CR[202]= 1623; // CTR DECRYPTION INT CCF INT_ERR DATATYPE 3

	vector_CR[203]= 89;   // CTR DECRYPTION DERIVATION REGISTER ERROR DATATYPE 0
	vector_CR[204]= 91;   // CTR DECRYPTION DERIVATION REGISTER ERROR DATATYPE 1
	vector_CR[205]= 93;   // CTR DECRYPTION DERIVATION REGISTER ERROR DATATYPE 2
	vector_CR[206]= 95;   // CTR DECRYPTION DERIVATION REGISTER ERROR DATATYPE 3

	vector_CR[207]= 1113; // CTR DECRYPTION DERIVATION INT_ERR DATATYPE 0
	vector_CR[208]= 1115; // CTR DECRYPTION DERIVATION INT_ERR DATATYPE 1
	vector_CR[209]= 1117; // CTR DECRYPTION DERIVATION INT_ERR DATATYPE 2
	vector_CR[210]= 1119; // CTR DECRYPTION DERIVATION INT_ERR DATATYPE 3

	vector_CR[211]= 6233; // CTR DECRYPTION DERIVATION DMA REGISTER ERROR DATATYPE 0
	vector_CR[212]= 6235; // CTR DECRYPTION DERIVATION DMA REGISTER ERROR DATATYPE 1
	vector_CR[213]= 6237; // CTR DECRYPTION DERIVATION DMA REGISTER ERROR DATATYPE 2
	vector_CR[214]= 6239; // CTR DECRYPTION DERIVATION DMA REGISTER ERROR DATATYPE 3

	vector_CR[215]= 7257; // CTR DECRYPTION DERIVATION DMA INT_ERR DATATYPE 0
	vector_CR[216]= 7259; // CTR DECRYPTION DERIVATION DMA INT_ERR DATATYPE 1
	vector_CR[217]= 7261; // CTR DECRYPTION DERIVATION DMA INT_ERR DATATYPE 2
	vector_CR[218]= 7263; // CTR DECRYPTION DERIVATION DMA INT_ERR DATATYPE 3

	vector_CR[219]= 601;  // CTR DECRYPTION DERIVATION INT CCF REGISTER ERROR DATATYPE 0
	vector_CR[220]= 603;  // CTR DECRYPTION DERIVATION INT CCF REGISTER ERROR DATATYPE 1
	vector_CR[221]= 605;  // CTR DECRYPTION DERIVATION INT CCF REGISTER ERROR DATATYPE 2
	vector_CR[222]= 607;  // CTR DECRYPTION DERIVATION INT CCF REGISTER ERROR DATATYPE 3

	vector_CR[223]= 1625; // CTR DECRYPTION DERIVATION INT CCF INT_ERR DATATYPE 0
	vector_CR[224]= 1627; // CTR DECRYPTION DERIVATION INT CCF INT_ERR DATATYPE 1
	vector_CR[225]= 1629; // CTR DECRYPTION DERIVATION INT CCF INT_ERR DATATYPE 2
	vector_CR[226]= 1631; // CTR DECRYPTION DERIVATION INT CCF INT_ERR DATATYPE 3

	vector_CR[227]= 73;   // CTR KEY GENERATION REGISTER ERROR 
	vector_CR[228]= 1097; // CTR KEY GENERATION INT_ERR 

	vector_CR[229]= 6185; // CTR KEY GENERATION DMA REGISTER ERROR 
	vector_CR[230]= 7209; // CTR KEY GENERATION DMA INT_ERR 
 
	vector_CR[231]= 553;  // CTR DECRYPTION DERIVATION INT CCF REGISTER ERROR
	vector_CR[232]= 1577; // CTR DECRYPTION DERIVATION INT CCF INT_ERR

	/*
		ADDR CASES DEFINITIONS
	*/

	vector_address[0]= ADDR_AES_CR;
	vector_address[1]= ADDR_AES_KEYR3;
	vector_address[2]= ADDR_AES_KEYR2;
	vector_address[3]= ADDR_AES_KEYR1;
	vector_address[4]= ADDR_AES_KEYR0;
	vector_address[5]= ADDR_AES_IVR3;
	vector_address[6]= ADDR_AES_IVR2;
	vector_address[7]= ADDR_AES_IVR1;
	vector_address[8]= ADDR_AES_IVR0;
	vector_address[9]= ADDR_AES_SR;

	/*
		THIS IS TO BE USED LIKE A BACKUP VALUE FROM LAST CR GENERATED ON SUFLE 
	*/
	last_cr = 0 ;
	counter_sufle = 0 ;

	v_initial.format=vpiIntVal;

	v_initial.value.integer = 0;
	vpi_put_value(PENABLE, &v_initial, NULL, vpiNoDelay);	
	vpi_put_value(PSEL , &v_initial, NULL, vpiNoDelay);
	vpi_put_value(PADDR, &v_initial, NULL, vpiNoDelay);
	vpi_put_value(i, &v_initial, NULL, vpiNoDelay);
	vpi_put_value(PWRITE, &v_initial, NULL, vpiNoDelay);
	vpi_put_value(PWDATA, &v_initial, NULL, vpiNoDelay);



	return 0;
}
